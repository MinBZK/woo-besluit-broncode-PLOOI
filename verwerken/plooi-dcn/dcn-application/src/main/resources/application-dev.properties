#
# application-dev.properties
#
# Database settings
#
# Credentials are not configured here. PostgreSQL uses the OS user as the default user name
# and therefore that DB user must exists. The password can be passed as a system property:
# - When starting Spring Boot as a standalone Java app:
#     $ java -Dspring.datasource.password=xxx -jar target/plooi-dcn-0.0.3-SNAPSHOT.jar
# - When starting Spring Boot via the Maven plugin, export MAVEN_OPTS (via .profile)
#     $ export MAVEN_OPTS="-Dspring-boot.run.jvmArguments=-Dspring.datasource.password=xxx"
#   and then just call the run goal:
#     $ mvn spring-boot:run
spring.datasource.driver-class-name=org.postgresql.Driver
spring.datasource.url=jdbc:postgresql://localhost:5432/dcn

#
# Solr configuration
#
dcn.solr.url=http://localhost:8983/solr
dcn.solr.collection=plooi

#
# Quartz schedules
#
dcn.schedule.ronl=0+0+0+1+1+?+2099
dcn.schedule.oep=0+0+0+1+1+?+2099
dcn.schedule.roo=0+0+0+1+1+?+2099
dcn.schedule.publishingstate=0+0+0+1+1+?+2099

#
# DCN Module specifics
#
dcn.ronl.archief.root=../tmp/ronl-archief
dcn.aanlo.docs.root=../tmp/aanlo-docs

#spring.resources.static-locations=file:dcn/src/main/resources/static/
spring.resources.cache.period=0

#
# Proxy settings for http. When proxy is needed, do this on the endpoint: to("http://api?{{dcn.proxySettings}}")
# TODO that is not a nice way of doing this. Better would be to create a separate component to handle non proxied request
#
#dcn.proxyHost=127.0.0.1
#dcn.proxyPort=9090
#dcn.proxySettings=
#dcn.proxySettings=&proxyAuthHost=${dcn.proxyHost}&proxyAuthPort=${dcn.proxyPort}&proxyAuthScheme=http
